name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to Kubernetes
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig
    steps:
      - name: Checkout source that triggered CI
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.workflow_run.repository.full_name }}
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Set kubeconfig (auto-detect base64/plain)
        shell: bash
        run: |
          if [[ -z "$KUBE_CONFIG" ]]; then
            echo "ERROR: KUBE_CONFIG secret is empty" >&2
            exit 1
          fi
          # Try base64 decode; if it fails, write as-is
          if echo "$KUBE_CONFIG" | base64 -d >/dev/null 2>&1; then
            echo "$KUBE_CONFIG" | base64 -d > "$KUBECONFIG"
            echo "KUBECONFIG written (decoded from base64)"
          else
            printf '%s' "$KUBE_CONFIG" > "$KUBECONFIG"
            echo "KUBECONFIG written (plain text)"
          fi
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

      - name: Debug workspace contents
        run: |
          echo "Repository: ${{ github.event.workflow_run.repository.full_name }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Workspace: $GITHUB_WORKSPACE"
          pwd
          git rev-parse --abbrev-ref HEAD || true
          git rev-parse HEAD || true
          ls -la
          echo "List k8s dir:" && ls -la k8s || true
          echo "List k8s files via git:" && git ls-tree --name-only -r HEAD | grep '^k8s/' || true

      - name: Show kubectl config and cluster info
        shell: bash
        run: |
          echo "--- kubeconfig (sanitized) ---"
          # Mask tokens/certs before printing
          sed -E 's/(token: ).*/\1*******/; s/(client-certificate-data: ).*/\1*******/; s/(client-key-data: ).*/\1*******/; s/(certificate-authority-data: ).*/\1*******/' "$KUBECONFIG" || true
          echo "--- kubectl config view ---"
          kubectl config view || true
          echo "--- current context ---"
          kubectl config current-context || true
          echo "--- cluster-info ---"
          kubectl cluster-info || true

      - name: Ensure k8s manifests present
        run: |
          if [ ! -d k8s ]; then
            echo "ERROR: k8s directory is missing in this commit." >&2
            exit 1
          fi

      - name: Deploy to Kubernetes
        shell: bash
        run: |
          # Primary attempt with validation
          set -e
          kubectl apply -f k8s/
        
      - name: Fallback apply without OpenAPI validation (if needed)
        if: ${{ failure() }}
        shell: bash
        run: |
          echo "Retrying kubectl apply with --validate=false (API server validation unavailable)" >&2
          kubectl apply -f k8s/ --validate=false

      - name: Verify rollout
        run: |
          kubectl -n task-manager rollout status deploy/backend --timeout=120s || exit 1
          kubectl -n task-manager rollout status deploy/frontend --timeout=120s || exit 1

      - name: Notify Telegram (success)
        if: ${{ success() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Deployment successful
            Repo: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
            Environment: Kubernetes (task-manager)

  notify-failure:
    name: Notify Failure
    if: ${{ github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Notify Telegram (failure)
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Deployment failed
            Repo: ${{ github.repository }}
            CI Conclusion: ${{ github.event.workflow_run.conclusion }}
            Actor: ${{ github.actor }}
            Check CI logs for details.
