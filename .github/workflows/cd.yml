name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

jobs:
  deploy:
    name: Deploy to Kubernetes
    # Run only if CI succeeded and branch is main
    if: >
      ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    env:
      REGISTRY: cr.yandex
      REGISTRY_ID: ${{ secrets.YCR_REGISTRY_ID }}
      IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
      NAMESPACE: task-manager
    steps:
      - name: Checkout repository at CI commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl config current-context || true

      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          echo "yc version:" && $HOME/yandex-cloud/bin/yc --version

      - name: Configure YC auth
        env:
          YC_OAUTH_TOKEN: ${{ secrets.YC_OAUTH_TOKEN }}
        run: |
          # Configure yc to be able to exchange OAuth to IAM token
          $HOME/yandex-cloud/bin/yc config set token "$YC_OAUTH_TOKEN"
          # Optional: disable interactive prompts
          $HOME/yandex-cloud/bin/yc config set core.retry-interval 0s || true

      - name: Patch kubeconfig exec path to yc
        run: |
          # Replace any absolute path to yc in kubeconfig with plain 'yc' (uses PATH)
          sed -i 's|/Users/islebedev/yandex-cloud/bin/yc|yc|g' $HOME/.kube/config
          sed -i 's|/home/runner/.*/yc|yc|g' $HOME/.kube/config || true
          echo "Patched kubeconfig:" && grep -n "command: yc" -n $HOME/.kube/config || true

      - name: Ensure namespace exists
        run: |
          kubectl get ns ${NAMESPACE} || kubectl create ns ${NAMESPACE}

      - name: Create/Update imagePullSecret for YCR
        env:
          YC_OAUTH_TOKEN: ${{ secrets.YC_OAUTH_TOKEN }}
        run: |
          kubectl delete secret ycr-pull-secret -n ${NAMESPACE} --ignore-not-found
          kubectl create secret docker-registry ycr-pull-secret \
            --docker-server=${REGISTRY} \
            --docker-username=oauth \
            --docker-password=${YC_OAUTH_TOKEN} \
            -n ${NAMESPACE}
          # Attach pull secret to default service account
          kubectl patch serviceaccount default -n ${NAMESPACE} \
            -p '{"imagePullSecrets": [{"name": "ycr-pull-secret"}]}' --type=merge || true

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/namespace.yaml || true
          kubectl apply -f k8s/mysql.yaml
          kubectl apply -f k8s/backend.yaml
          kubectl apply -f k8s/frontend.yaml

      - name: Update images to CI commit SHA
        run: |
          kubectl -n ${NAMESPACE} set image deployment/backend backend=${REGISTRY}/${REGISTRY_ID}/task-manager-backend:${IMAGE_TAG}
          kubectl -n ${NAMESPACE} set image deployment/frontend frontend=${REGISTRY}/${REGISTRY_ID}/task-manager-frontend:${IMAGE_TAG}

      - name: Wait for rollout
        run: |
          kubectl -n ${NAMESPACE} rollout status deployment/backend --timeout=180s
          kubectl -n ${NAMESPACE} rollout status deployment/frontend --timeout=180s

      - name: Notify Telegram (Deploy Success)
        if: success()
        run: |
          URL_FRONTEND=$(kubectl -n ${NAMESPACE} get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}')
          MSG="✅ Deploy success for ${{ github.repository }}@main (#${{ github.run_number }})\nCommit: ${{ github.event.workflow_run.head_sha }}\nFrontend: ${URL_FRONTEND}"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_TO }}" \
            -d parse_mode="Markdown" \
            -d text="$MSG"

      - name: Notify Telegram (Deploy Failed)
        if: failure()
        run: |
          LOGS_BACKEND=$(kubectl -n ${NAMESPACE} logs deploy/backend --tail=50 || true)
          LOGS_FRONTEND=$(kubectl -n ${NAMESPACE} logs deploy/frontend --tail=50 || true)
          MSG=$(cat << 'EOM'
          ❌ Deploy failed for ${{ github.repository }}@main (#${{ github.run_number }})
          Commit: ${{ github.event.workflow_run.head_sha }}
          Workflow: CD

          Backend logs (tail):
          EOM
          )
          MSG="$MSG\n$LOGS_BACKEND\n\nFrontend logs (tail):\n$LOGS_FRONTEND"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_TO }}" \
            -d parse_mode="Markdown" \
            -d text="$MSG"
