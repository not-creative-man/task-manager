name: CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run on'
        required: true
        default: 'main'
        type: string

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: my_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js (Backend)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Setup Node.js (Frontend)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Run Backend Linter
        working-directory: ./backend
        run: npm run lint
          
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          
      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js (Backend)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Setup Node.js (Frontend)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          
      - name: Run frontend tests
        run: |
          cd frontend
          npm ci
          npm run test:coverage

      - name: Run Backend Tests
        working-directory: ./backend
        run: npm test -- --coverage
        env:
          DB_HOST: localhost
          DB_USER: root
          DB_PASSWORD: password
          DB_NAME: my_db
          NODE_ENV: test

      # Upload test coverage
      - name: Upload Backend Coverage
        uses: codecov/codecov-action@v4
        with:
          directory: ./backend/coverage
          flags: backend
          name: backend-coverage

      - name: Upload Frontend Coverage
        uses: codecov/codecov-action@v4
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage

      - name: Upload Backend Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-artifact
          path: backend/coverage

      - name: Upload Frontend Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-artifact
          path: frontend/coverage

#  security-scan:
#    name: Security Scan (Trivy)
#    runs-on: ubuntu-latest
#    needs: [build]
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Run Trivy FS scan
#        uses: aquasecurity/trivy-action@0.20.0
#        with:
#          scan-type: 'fs'
#          scanners: 'vuln,secret'
#          severity: 'CRITICAL,HIGH'
#          ignore-unfixed: true
#          format: 'table'
#          exit-code: '1'
#          vuln-type: 'os,library'
#
#      - name: Run Trivy config scan (Kubernetes manifests)
#        uses: aquasecurity/trivy-action@0.20.0
#        with:
#          scan-type: 'config'
#          hide-progress: true
#          format: 'table'
#          exit-code: '1'
#          scan-ref: 'k8s'

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [ test ] # security-scan
    steps:
      - uses: actions/checkout@v4

      - name: Download Backend Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage-artifact
          path: backend/coverage

      - name: Download Frontend Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage-artifact
          path: frontend/coverage

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >-
            -Dsonar.qualitygate.wait=true
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/test/**,**/*.spec.js,**/*.test.js
            -Dsonar.testExecutionReportPaths=test-report.xml
            -Dsonar.test.inclusions=**/*.spec.js,**/*.test.js
            -Dsonar.javascript.node.maxspace=4096
            -Dsonar.javascript.node.maxoldspacesize=4096
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Check test coverage
        run: |
          # Проверяем покрытие кода тестами
          if [ ! -f backend/coverage/coverage-summary.json ] || [ ! -f frontend/coverage/coverage-summary.json ]; then
            echo "Coverage report not found!"
            exit 1
          fi
          
          # Проверяем покрытие для бэкенда
          BACKEND_COVERAGE=$(node -pe 'JSON.parse(process.env.COVERAGE).total.lines.pct' < backend/coverage/coverage-summary.json)
          echo "Backend coverage: $BACKEND_COVERAGE%"
          
          # Проверяем покрытие для фронтенда
          FRONTEND_COVERAGE=$(node -pe 'JSON.parse(process.env.COVERAGE).total.lines.pct' < frontend/coverage/coverage-summary.json)
          echo "Frontend coverage: $FRONTEND_COVERAGE%"
          
          # Проверяем, что покрытие не ниже 80%
          if (( $(echo "$BACKEND_COVERAGE < 80" | bc -l) )); then
            echo "Backend test coverage is below 80% (${BACKEND_COVERAGE}%)"
            exit 1
          fi
          
          if (( $(echo "$FRONTEND_COVERAGE < 80" | bc -l) )); then
            echo "Frontend test coverage is below 80% (${FRONTEND_COVERAGE}%)"
            exit 1
          fi
        env:
          COVERAGE: ${{ toJSON(needs.test.outputs.coverage) }}

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [sonar]
    env:
      REGISTRY: cr.yandex
      REGISTRY_ID: ${{ secrets.YCR_REGISTRY_ID }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Yandex Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth
          password: ${{ secrets.YC_OAUTH_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/task-manager-backend:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/task-manager-backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/task-manager-frontend:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/task-manager-frontend:latest
