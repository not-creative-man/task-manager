---
- name: Deploy Task Manager Application
  hosts: all
  become: true
  vars:
    app_dir: /home/ubuntu/task-manager-deployment
    registry_host: "{{ lookup('env', 'REGISTRY_HOST') | default('cr.yandex/crxxxxxxxxxxxx') }}"
    vm_ip: "{{ lookup('env', 'VM_IP') | default('localhost') }}"
  
  tasks:
    - name: Create deployment directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy docker-compose.prod.yml
      copy:
        src: ../docker-compose.prod.yml
        dest: "{{ app_dir }}/docker-compose.prod.yml"
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      when: inventory_file is defined

    - name: Copy database initialization files
      copy:
        src: ../db/
        dest: "{{ app_dir }}/"
        owner: ubuntu
        group: ubuntu
      when: inventory_file is defined

    - name: Login to Yandex Container Registry
      shell: yc container registry configure-docker
      become_user: ubuntu
      register: registry_login
      changed_when: registry_login.rc == 0

    - name: Pull latest images
      docker_image:
        name: "{{ registry_host }}/task-manager-backend:latest"
        source: pull
      become_user: ubuntu
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock

    - name: Pull frontend image
      docker_image:
        name: "{{ registry_host }}/task-manager-frontend:latest"
        source: pull
      become_user: ubuntu
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock

    - name: Stop existing containers
      docker_compose:
        project_src: "{{ app_dir }}"
        files: docker-compose.prod.yml
        state: absent
      become_user: ubuntu
      ignore_errors: yes

    - name: Start application containers
      docker_compose:
        project_src: "{{ app_dir }}"
        files: docker-compose.prod.yml
        state: present
        pull: yes
      become_user: ubuntu

    - name: Wait for services to be ready
      wait_for:
        port: "{{ item }}"
        host: "{{ vm_ip }}"
        timeout: 60
      loop:
        - 8080  # Frontend
        - 3000  # Backend
        - 3306  # MySQL

    - name: Check container status
      shell: docker-compose -f {{ app_dir }}/docker-compose.prod.yml ps
      become_user: ubuntu
      register: container_status

    - name: Display container status
      debug:
        var: container_status.stdout_lines

    - name: Display application URLs
      debug:
        msg: |
          Application deployed successfully!
          Frontend: http://{{ vm_ip }}:8080
          Backend API: http://{{ vm_ip }}:3000
          MySQL: {{ vm_ip }}:3306 